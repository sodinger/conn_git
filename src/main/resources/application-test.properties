
#application-{profile}.properties
#使用哪个配置文件，取profile的值
#spring.profiles.active=product

#设置编码格式
spring.banner.charset=UTF-8
server.tomcat.uri-encoding=UTF-8
spring.http.encoding.force=true
spring.http.encoding.enabled=true
spring.http.encoding.charset=UTF-8
spring.messages.encoding=UTF-8

# springboot 默认的端口号为：8080，此时浏览器访问：127.0.0.1:8080/demo(方法的注解值)即可查看。
# 需要修改默认端口号时及上下文路径时，只需要在application.properties设置以下属性
# 端口号，如果不配置，默认为8080
server.port=8877
# 应用上下文路径，如果不配置，默认为空。server.servlet.context-path 2.0版本使用
server.servlet.context-path=/chapter-2


#支持自定义配置属性值,然后可通过@Value("${sboot.desc}")的形式获取属性值
#在resources/META-INF/additional-spring-configuration-metadata.json配置属性metadata
sboot.name=sboot-demoX----test
sboot.age=18
#此处有中文乱码，可将中文转成Unicode编码或者使用yml配置格式(默认就支持utf-8)
sboot.desc=项目描述信息：这是一个springboot的demo.${sboot.name},${sboot.age}
	

# 随机字符串
blog.value=${random.value}
# 随机int
blog.number=${random.int}
# 随机long
blog.bignumber=${random.long}
# 10以内的随机数
blog.test1=${random.int(10)}
# 1-20的随机数
blog.test2=${random.int[1,20]}

#====================================================================
#日志路径及级别配置
logging.path=D:/logs
logging.file=../log.log
logging.level.org.springframework.web=INFO
#日志文件会在10Mb大小的时候被截断，产生新的日志文件

#切换日志级别为debug。 Spring Boot中默认配置了ERROR、WARN和INFO级别的日志输出到控制台。
debug=false
#我们可以通过两种方式切换至DEBUG级别：
#在运行命令后加入--debug标志，如：$ java -jar myapp.jar --debug
#在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。

#日志的级别控制
#配置格式：logging.level.*=[TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF]
#logging.level是日志级别控制的前缀，*为包名或Logger名
#如：logging.level.com.didispace=DEBUG：com.didispace包下所有class以DEBUG级别输出
#如：logging.level.root=WARN：root日志以WARN级别输出

#日志的多彩输出
#NEVER：禁用ANSI-colored输出（默认项）
#DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）
#ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用
spring.output.ansi.enabled=always

#自定义日志配置
#Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml）
#根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：
#Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
#Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
#Log4j2：log4j2-spring.xml, log4j2.xml
#JDK (Java Util Logging)：logging.properties

#自定义日志输出格式
#定义输出到控制台的样式（不支持JDK Logger）
#logging.pattern.console=
#定义输出到文件的样式（不支持JDK Logger）
#logging.pattern.file


